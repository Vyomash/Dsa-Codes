class Solution {
public:
    int pivotindex(vector<int>& arr){
        int s=0;
        int n=arr.size();
        int e=n-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(s==e){
                return s;
            }
            else if(mid-1>=0 && arr[mid]<arr[mid-1]){
                return mid-1;
            }
            else if(mid+1<n && arr[mid]>arr[mid+1]){
                return mid;
            }
            else if(arr[s]>arr[mid]){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return -1;
    }

    int binary(vector<int>& arr,int s,int e, int target){
        while(s<=e){
            int mid=s+(e-s)/2;
            if(arr[mid]==target){
                return mid;
            }
            else if(target>arr[mid]){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int pivot=pivotindex(nums);
        int n=nums.size();
        int s=0,e=n-1;
        int ans=-1;
        if(target>=nums[0] && target<=nums[pivot]){
            ans=binary(nums,s,pivot,target);
 
        }
        else{
            ans=binary(nums,pivot+1,n-1,target);
        }
        return ans;
    }
};
