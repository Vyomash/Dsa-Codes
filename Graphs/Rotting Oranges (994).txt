class Solution {
public:
    bool isSafe(int newX,int newY,int n,int m,vector<vector<int>>& temp){
        if(newX>=0 && newY>=0 && newX<n && newY<m && temp[newX][newY]==1){
            return true;
        }
        else{
            return false;
        }
    }


    int orangesRotting(vector<vector<int>>& grid) {
        vector<vector<int>> temp=grid;
        queue<pair<pair<int,int>,int> >q;
        int anstime=0;
         int n = grid.size();
        int m = grid[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                    if(temp[i][j]==2){
                        q.push({{i,j},0});
                    }
            }
        }
        while(!q.empty()){
            auto frontNode=q.front();
            q.pop();
            auto frontNodecordinate=frontNode.first;
            int frontNodetime=frontNode.second;
            int frontXcor=frontNodecordinate.first;
            int frontYcor=frontNodecordinate.second;
            int dx[]={-1,0,1,0};
            int dy[]={0,1,0,-1};
            for(int k=0;k<4;k++){
                int newX=frontXcor+dx[k];
                int newY=frontYcor+dy[k];
                if(isSafe(newX,newY,n,m,temp)){
                    q.push({{newX,newY},frontNodetime+1});
                    // Mark this orange as rotten
                    temp[newX][newY] = 2;   // yaaha pa galti hua tha
                    anstime=frontNodetime+1;
                }
            }
        }
        //check ki koi 1 vala oraange reh toh nhi gaya
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                    if(temp[i][j]==1){
                        return -1;
                    }
            }
        }
        return anstime;
        
    }
};