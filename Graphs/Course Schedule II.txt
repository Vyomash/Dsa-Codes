class Solution {
public:
 void solve(unordered_map<int,list<int>>& adj,vector<int>& toposort,int n){
       queue<int> q;
       map<int,int> indg;
       for(auto i: adj){
        for(auto j:i.second){
            indg[j]++;
        }
       }
       for(int i=0;i<n;i++){
        if(indg[i]==0){
            q.push(i);
        }
       }
       while(!q.empty()){
            int frontNode=q.front();
            q.pop();
            toposort.push_back(frontNode);
            for(auto nbr:adj[frontNode]){
                indg[nbr]--;
                if(indg[nbr]==0){
                    q.push(nbr);
                }
            }
       }    
       
       }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
         unordered_map<int,list<int>> adj;
         for(vector<int> i: prerequisites){
            int u=i[0];
            int v=i[1];
            adj[v].push_back(u);
         }
        vector<int> toposort;
         int n=numCourses;
        solve(adj,toposort,n);
         if(toposort.size()==numCourses){
            return toposort;
         }
         else{
            return {};
         }
    }
};